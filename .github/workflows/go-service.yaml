name: Build and Deploy Go Microservice
on:
  push:
    paths:
      - 'go-service/**'
  workflow_dispatch:

env:
  REGISTRY: gutheriecacr.azurecr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      containerImage-go: ${{ steps.image-tag.outputs.image-go-service }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR then build and push the image
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/go-service
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./go-service
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        
      - name: Output image tag
        id: image-tag
        run: echo "::set-output name=image-go-service::${{ env.IMAGE_NAME }}/go-service:sha-$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]'


  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Revision
        uses: azure/CLI@v1
        with:
          inlineScript: |
            appName=$(az containerapp list | jq '.[].name' | grep -i go)
            echo $appName
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp update --name $appName -g ${{ secrets.RESOURCE_GROUP }} \
                --image '${{ env.REGISTRY }}/${{ needs.build.outputs.containerImage-go }}' \
                --revision-suffix $(git rev-parse --short HEAD)
